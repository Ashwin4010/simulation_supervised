#!/usr/bin/python

""" 
Run_simulation_scripts governs the running of long gazebo_ros_tensorflow simulations.

The core functionality lies in: 
	1. parsing the correct arguments at different levels (tensorflow dnn, gazebo environment, ros supervision)
	2. different crash handling when for instance starting gazebo / tensorflow fails

The script is organized in different steps:
1. Parsing arguments saved in a name space
2. launching ROS  and robot related parameters
3. launching tensorflow in machine (docker/singularity/normal) environment
4. launching experiment with potentially autogenerated gazebo world

Author: Klaas Kelchtermans

Dependecies: simulation_supervised, pilot, klaas_robots
"""

import sys, os, os.path
import subprocess
import shutil
import time
import signal
import argparse


##########################################################################################################################
# STEP 1 Load Parameters

parser = argparse.ArgumentParser(description="""Run_simulation_scripts governs the running of long gazebo_ros_tensorflow simulations.
				The core functionality lies in:
				1. parsing the correct arguments at different levels (tensorflow dnn, gazebo environment, ros supervision)
				2. different crash handling when for instance starting gazebo / tensorflow fails""")

# ==========================
#   General Settings
# ==========================
parser.add_argument("-l", "--log_tag", type=str, help="LOGTAG: tag used to name logfolder.")
parser.add_argument("-n", "--number_of_runs", type=int, help="NUMBER_OF_RUNS: define the number of runs the robot will be trained/evaluated.")
parser.add_argument("-g", "--graphics", action='store_true', help="Add extra nodes for visualization e.g.: Gazebo GUI, control display, depth prediction, ...")
parser.add_argument("-m", "--mode", default='evaluation', type=str, help="This script can launch 2 modes of experiments: training (default) or evaluation.")

parser.add_argument("--evaluate_every", default=20, type=int, help="Evaluate every N runs when training.")

# ==========================
#   Robot Settings
# ==========================
parser.add_argument("--robot",default='turtle_sim', type=str, help="Specify the robot configuration file: turtle_sim(default), drone_sim, turtle_real, drone_real.")

# ==========================
#   Tensorflow Settings
# ==========================
parser.add_argument("--checkpoint",default='mobilenet_025', type=str, help="Specify the directory of the checkpoint of the earlier trained model.")
parser.add_argument("-pe","--python_environment",default='sing_ql', type=str, help="Define which environment should be loaded in shell when launching tensorlfow. Possibilities: sing_ql, docker, virtualenv.")

# ==========================
#   Environment Settings
# ==========================
parser.add_argument("-w","--world",dest='worlds', action='append', nargs=1, help="Define different worlds: canyon, forest, sandbox, esat_v1, esat_v2, ... .")
parser.add_argument("-p","--param",dest='params', action='append', nargs=1, help="Add more parameters to the command loading the DNN in tensorflow.")

FLAGS=parser.parse_args()

if len(FLAGS.worlds) == 0 : FLAGS.worlds=['canyon'] #add default world.

print("worlds: {}".format(FLAGS.worlds))
print("params: {}".format(FLAGS.params))
# The difficulty remains on how to load multiple parameters and forward them to the next command.
# Probably saving them first to a yaml file from which they are parsed is most readible...
# The question then remains wether the transition to python is still worth it.

# Todo: save configuration to log_folder



##########################################################################################################################
# STEP 2 Start ROS with ROBOT specific parameters
